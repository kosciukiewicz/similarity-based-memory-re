[tool.poetry]
name = "similarity_based_memory_re"
version = "0.1.0"
description = ""
authors = [
    "Witold Ko≈õciukiewicz <witold.kosciukiewicz@pwr.edu.pl>",
]

[tool.poetry.dependencies]
python = "3.10.0"
python-dotenv = "0.21.0"
omegaconf = "^2.3.0"
pyyaml = "^6.0"
hyperopt = "^0.2.7"
hydra-joblib-launcher = "^1.2.0"
hydra-core = "^1.3.0"
hydra-colorlog = "1.2.0"
torch = "1.12.1"
torchaudio = "0.12.1"
torchvision = "0.13.1"
pandas = "^1.5.2"
scikit-learn = "^1.2.0"
pydantic = "^1.10.2"
pytorch-lightning = "1.6.5"
transformers = "4.20.0"
wandb = "^0.13.7"
seaborn = "^0.12.2"
pytorch-metric-learning = "2.1.0"
gdown = "^4.7.1"

[tool.poetry.group.dev]

[tool.poetry.group.dev.dependencies]
ipython = "^8.2.0"
pre-commit = "^2.17.0"
poethepoet = "^0.16.4"
ipykernel = "^6.16.2"

[tool.poetry.group.test.dependencies]
black = "^22.10.0"
isort = { version = "^5.10.1", extras = ["pyproject"] }
mypy = "^1.2"
coverage = { version = "^6.5.0", extras = ["toml"] }
flake8 = "^5.0.4"
flake8-bugbear = "^22.9.23"
flake8-comprehensions = "^3.10.0"

pytest = "^7.1.1"
pytest-cov = "4.0.0"
pytest-env = "^0.6.2"
pytest-mock = "^3.7.0"
pytest-asyncio = "^0.18.3"
pytest-random-order = "^1.0.4"
pytest-xdist = "^2.5.0"
pytest-sugar = "^0.9.5"
pytest-randomly = "^3.12.0"

[tool.poe.tasks]
force_cuda = "pip install torch==1.12.1+cu116 torchvision==0.13.1+cu116 torchaudio==0.12.1 --extra-index-url https://download.pytorch.org/whl/cu116"
black = "black --check ."
black_fix = "black ."
isort = "isort . -c"
isort_fix = "isort ."
flake8 = "flake8 ."
mypy = "mypy ."
unit_test = "pytest -m"

check = ["black", "isort", "flake8", "mypy"]
fix = ["black_fix", "isort_fix"]
fix_check = ["fix", "check"]
test = ["unit_test"]
all = ["check", "test"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ['py310']
skip-string-normalization = true
line-length = 100
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.data
    | \.dvc
    | \.git
    | \.gitlab
    | \.hg
    | \.mypy_cache
    | \.test_cache
    | \.tox
    | \.venv
    | submodules
    | storage
  )/
)
'''

[tool.isort]
profile = 'black'
line_length = 100
known_third_party = ["submodules"]
skip_glob = ["submodules/*"]

[tool.mypy]
ignore_missing_imports = true
python_version = "3.10"
exclude = "submodules"

[[tool.mypy.overrides]]
module = [
    "pandas",
    "tqdm.*",
    "yaml.*",
    "matplotlib.*",
    "plotly.*",
    "seaborn.*",
    "torch.*",
    "IPython.*",
]
ignore_missing_imports = true


[tool.pytest.ini_options]
addopts = '''
  --tb=short
  --strict-markers
  --asyncio-mode=auto
  --cov=src
  --cov-branch
  --cov-report=term-missing
  --cov-report=html:.artifacts/coverage.html
  --cov-report=xml:.artifacts/coverage.xml
  --junit-xml=.artifacts/tests.xml
  --no-cov-on-fail
  --asyncio-mode=auto
  --numprocesses=auto
'''

[tool.coverage.report]
show_missing = true
ignore_errors = true
exclude_lines = [
    # Regexes for lines to exclude from consideration
    'import',
    'from',
    # Have to re-enable the standard pragma
    'pragma: no cover',
    # Don't complain about missing debug-only code:
    'def __repr__',
    # Don't complain if test don't hit defensive assertion code:
    'raise AssertionError',
    'raise NotImplementedError',
    # Don't complain if non-runnable code isn't run:
    'if __name__ == .__main__.:',
    'pass',
    # Don't complain about abstract methods
    '@(abc\.)?abstractmethod'
]
